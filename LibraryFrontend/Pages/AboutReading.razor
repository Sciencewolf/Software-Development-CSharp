@page "/Reading/{id:guid}"
@using LibraryBackend.Shared
@using LibraryFrontend.Services
@using LibraryFrontend.Components
@inject IReadingService ReadingService
@inject NavigationManager NavMan

<PageTitle>@Title</PageTitle>
<h3>@Title</h3>

<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Address</th>
        <th>Name</th>
        <th>BirthDay</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>@Id</td>
        <td>Address</td>
        <td>Name</td>
        <td>@DateTime.Now.ToShortDateString()</td>
    </tr>
    </tbody>
</table>

<div class="d-flex justify-content-center align-items-center gap-2 flex-column">
    <button class="btn btn-info" >Update</button>
    <div>Or</div>
    <button class="btn btn-danger" >Delete</button>
</div>

@code {
    [Parameter] public Guid Id { get; set; }
    private Reading _reading { get; set; }
    private const string Title = "About Reading";
    private const string Url = "/Reading/all";
    private bool _error = false;
    
    private async Task DeleteAsync()
    {
        await ReadingService.DeleteAsync(Id);
        NavMan.NavigateTo(Url);
    }

    private async Task UpdateAsync()
    {
        await ReadingService.UpdateAsync(Id, _reading);
        NavMan.NavigateTo(Url);
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _reading = await ReadingService.GetAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _reading = null;
            _error = !_error;
        }
    }
}
