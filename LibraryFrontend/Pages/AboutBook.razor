@page "/Book/{id:guid}"
@using LibraryBackend.Shared
@using LibraryFrontend.Services
@using LibraryFrontend.Components
@inject IBookService BookService
@inject NavigationManager NavMan

<PageTitle>@Title</PageTitle>
<h3>@Title</h3>

<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Title</th>
        <th>Author</th>
        <th>Publisher</th>
        <th>YearOfPublication</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>@Id</td>
        <td>Title</td>
        <td>Author</td>
        <td>Publisher</td>
        <td>@DateTime.Now.ToShortDateString()</td>
    </tr>
    </tbody>
</table>

<div class="d-flex justify-content-center align-items-center gap-2 flex-row">
    <button class="btn btn-info" >Update</button>
    <div>Or</div>
    <button class="btn btn-danger" >Delete</button>
</div>

@code {
    [Parameter] public Guid Id { get; set; }
    private Book? _book { get; set; }
    private const string Title = "About Book";
    private const string Url = "/Book/all";
    private bool _error = false;
    
    private async Task DeleteAsync()
    {
        await BookService.DeleteAsync(Id);
        NavMan.NavigateTo(Url);
    }

    private async Task UpdateAsync()
    {
        await BookService.UpdateAsync(Id, _book);
        NavMan.NavigateTo(Url);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _book = await BookService.GetAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _book = null;
            _error = !_error;
        }
    }
}
